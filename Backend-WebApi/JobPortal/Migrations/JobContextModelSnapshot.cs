// <auto-generated />
using System;
using JobPortal.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace JobPortal.Migrations
{
    [DbContext(typeof(JobContext))]
    partial class JobContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FileModel", b =>
                {
                    b.Property<Guid>("guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("JobPostId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("SeekerId")
                        .HasColumnType("uuid");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("guid")
                        .HasName("PK_FileModel");

                    b.HasIndex("JobPostId");

                    b.HasIndex("SeekerId");

                    b.ToTable("fileModels");
                });

            modelBuilder.Entity("JobPortal.Models.Address", b =>
                {
                    b.Property<Guid>("guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("companyId")
                        .HasColumnType("uuid");

                    b.HasKey("guid")
                        .HasName("PK_Address");

                    b.HasIndex("companyId");

                    b.ToTable("address");
                });

            modelBuilder.Entity("JobPortal.Models.Company", b =>
                {
                    b.Property<Guid>("guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("IndustryTypeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("WebsiteUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("guid")
                        .HasName("PK_Company");

                    b.HasIndex("IndustryTypeId");

                    b.ToTable("companies");
                });

            modelBuilder.Entity("JobPortal.Models.IndustryType", b =>
                {
                    b.Property<Guid>("guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("guid")
                        .HasName("PK_IndustryType");

                    b.ToTable("industryTypes");
                });

            modelBuilder.Entity("JobPortal.Models.JobApplication", b =>
                {
                    b.Property<Guid>("guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AppliedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("JobPostId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SeekerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("guid")
                        .HasName("PK_JobApplication");

                    b.HasIndex("JobPostId");

                    b.HasIndex("SeekerId");

                    b.ToTable("jobApplications");
                });

            modelBuilder.Entity("JobPortal.Models.Recruiter", b =>
                {
                    b.Property<Guid>("guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("guid")
                        .HasName("PK_Recruiter");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("recruiters");
                });

            modelBuilder.Entity("JobPortal.Models.Requirements", b =>
                {
                    b.Property<Guid>("guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.HasKey("guid")
                        .HasName("PK_Requirements");

                    b.HasIndex("PostId");

                    b.ToTable("requirements");
                });

            modelBuilder.Entity("JobPortal.Models.Responsibilities", b =>
                {
                    b.Property<Guid>("guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.HasKey("guid")
                        .HasName("PK_Responsibilities");

                    b.HasIndex("PostId");

                    b.ToTable("responsibilities");
                });

            modelBuilder.Entity("JobPortal.Models.Seeker", b =>
                {
                    b.Property<Guid>("guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConnectionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Experience")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("guid")
                        .HasName("PK_Seeker");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("seekers");
                });

            modelBuilder.Entity("JobPortal.Models.SeekerSkills", b =>
                {
                    b.Property<Guid>("guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("SeekerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid");

                    b.HasKey("guid")
                        .HasName("PK_Seekerkill");

                    b.HasIndex("SeekerId");

                    b.HasIndex("SkillId");

                    b.ToTable("seekerSkills");
                });

            modelBuilder.Entity("JobPortal.Models.User", b =>
                {
                    b.Property<Guid>("guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("HashKey")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("guid")
                        .HasName("PK_User");

                    b.ToTable("users");
                });

            modelBuilder.Entity("JobPost", b =>
                {
                    b.Property<Guid>("guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmploymentPosition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmploymentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("PostedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RecruiterID")
                        .HasColumnType("uuid");

                    b.Property<string>("SalaryPackage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("guid")
                        .HasName("PK_JobPost");

                    b.HasIndex("RecruiterID");

                    b.ToTable("jobPosts");
                });

            modelBuilder.Entity("PostSkills", b =>
                {
                    b.Property<Guid>("guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("JobPostId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid");

                    b.HasKey("guid")
                        .HasName("PK_PostSkill");

                    b.HasIndex("JobPostId");

                    b.HasIndex("SkillId");

                    b.ToTable("postSkills");
                });

            modelBuilder.Entity("Skill", b =>
                {
                    b.Property<Guid>("guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("guid")
                        .HasName("PK_Skill");

                    b.ToTable("skills");
                });

            modelBuilder.Entity("FileModel", b =>
                {
                    b.HasOne("JobPost", "JobPost")
                        .WithMany("resumes")
                        .HasForeignKey("JobPostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_FileModel_SeekerId");

                    b.HasOne("JobPortal.Models.Seeker", "Seeker")
                        .WithMany("resumes")
                        .HasForeignKey("SeekerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_FileModel_JobPostId");

                    b.Navigation("JobPost");

                    b.Navigation("Seeker");
                });

            modelBuilder.Entity("JobPortal.Models.Address", b =>
                {
                    b.HasOne("JobPortal.Models.Company", "company")
                        .WithMany("locations")
                        .HasForeignKey("companyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Address_CompanyId");

                    b.Navigation("company");
                });

            modelBuilder.Entity("JobPortal.Models.Company", b =>
                {
                    b.HasOne("JobPortal.Models.IndustryType", "industryType")
                        .WithMany("companies")
                        .HasForeignKey("IndustryTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("industryType");
                });

            modelBuilder.Entity("JobPortal.Models.JobApplication", b =>
                {
                    b.HasOne("JobPost", "jobPost")
                        .WithMany("jobApplications")
                        .HasForeignKey("JobPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_JobApplications_PostId");

                    b.HasOne("JobPortal.Models.Seeker", "seeker")
                        .WithMany("jobApplications")
                        .HasForeignKey("SeekerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_JobApplications_SeekerId");

                    b.Navigation("jobPost");

                    b.Navigation("seeker");
                });

            modelBuilder.Entity("JobPortal.Models.Recruiter", b =>
                {
                    b.HasOne("JobPortal.Models.Company", "company")
                        .WithMany("recruiters")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Recruiter_CompanyId");

                    b.HasOne("JobPortal.Models.User", "user")
                        .WithOne("recruiter")
                        .HasForeignKey("JobPortal.Models.Recruiter", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Recruiter_UserId");

                    b.Navigation("company");

                    b.Navigation("user");
                });

            modelBuilder.Entity("JobPortal.Models.Requirements", b =>
                {
                    b.HasOne("JobPost", "jobPost")
                        .WithMany("requirements")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Requirements_PostId");

                    b.Navigation("jobPost");
                });

            modelBuilder.Entity("JobPortal.Models.Responsibilities", b =>
                {
                    b.HasOne("JobPost", "jobPost")
                        .WithMany("responsibilities")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Requirements_PostId");

                    b.Navigation("jobPost");
                });

            modelBuilder.Entity("JobPortal.Models.Seeker", b =>
                {
                    b.HasOne("JobPortal.Models.User", "user")
                        .WithOne("seeker")
                        .HasForeignKey("JobPortal.Models.Seeker", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Seeker_UserId");

                    b.Navigation("user");
                });

            modelBuilder.Entity("JobPortal.Models.SeekerSkills", b =>
                {
                    b.HasOne("JobPortal.Models.Seeker", "seeker")
                        .WithMany("seekerSkills")
                        .HasForeignKey("SeekerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_SeekerSkills_PostId");

                    b.HasOne("Skill", "skill")
                        .WithMany("seekerSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SeekerSkills_SkillId");

                    b.Navigation("seeker");

                    b.Navigation("skill");
                });

            modelBuilder.Entity("JobPost", b =>
                {
                    b.HasOne("JobPortal.Models.Recruiter", "recruiter")
                        .WithMany("jobPosts")
                        .HasForeignKey("RecruiterID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_JobPost_RecruiterID");

                    b.Navigation("recruiter");
                });

            modelBuilder.Entity("PostSkills", b =>
                {
                    b.HasOne("JobPost", "JobPost")
                        .WithMany("requiredSkills")
                        .HasForeignKey("JobPostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PostSkills_PostId");

                    b.HasOne("Skill", "Skill")
                        .WithMany("postSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PostSkills_SkillId");

                    b.Navigation("JobPost");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("JobPortal.Models.Company", b =>
                {
                    b.Navigation("locations");

                    b.Navigation("recruiters");
                });

            modelBuilder.Entity("JobPortal.Models.IndustryType", b =>
                {
                    b.Navigation("companies");
                });

            modelBuilder.Entity("JobPortal.Models.Recruiter", b =>
                {
                    b.Navigation("jobPosts");
                });

            modelBuilder.Entity("JobPortal.Models.Seeker", b =>
                {
                    b.Navigation("jobApplications");

                    b.Navigation("resumes");

                    b.Navigation("seekerSkills");
                });

            modelBuilder.Entity("JobPortal.Models.User", b =>
                {
                    b.Navigation("recruiter");

                    b.Navigation("seeker");
                });

            modelBuilder.Entity("JobPost", b =>
                {
                    b.Navigation("jobApplications");

                    b.Navigation("requiredSkills");

                    b.Navigation("requirements");

                    b.Navigation("responsibilities");

                    b.Navigation("resumes");
                });

            modelBuilder.Entity("Skill", b =>
                {
                    b.Navigation("postSkills");

                    b.Navigation("seekerSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
